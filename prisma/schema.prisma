generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model ViewOnWar {
  code   String   @id
  target Target[]
}

model Nationality {
  code    String   @id
  targets Target[]
}

model Job {
  code    String   @id
  targets Target[] @relation("TargetJob")
}

model Creator {
  id        String     @id @default(cuid())
  email     String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  targets   Target[]
  evidences Evidence[]

  @@index(email)
}

model Nickname {
  id       String @id @default(cuid())
  value    String
  target   Target @relation(fields: [targetId], references: [id])
  targetId String

  @@index(value)
  @@index([targetId])
}

model TargetResource {
  id       String @id @default(cuid())
  url      String
  target   Target @relation(fields: [targetId], references: [id])
  targetId String

  @@index(url)
  @@index([targetId])
}

model TargetReview {
  id            String  @id @default(cuid())
  reviewComment String
  accepted      Boolean @default(false)

  target   Target @relation(fields: [targetId], references: [id])
  targetId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Target {
  id       String @id @default(cuid())
  slug     String @unique
  imageUrl String

  realName        String?
  nicknames       Nickname[]
  resources       TargetResource[]
  jobs            Job[]            @relation("TargetJob")
  nationality     Nationality      @relation(fields: [nationalityCode], references: [code])
  nationalityCode String
  viewOnWar       ViewOnWar        @relation(fields: [viewOnWarCode], references: [code])
  viewOnWarCode   String

  mainEvidence   Evidence?  @relation("TargetMainEvidence", fields: [mainEvidenceId], references: [id])
  mainEvidenceId String?    @unique
  evidences      Evidence[]

  creator   Creator? @relation(fields: [creatorId], references: [id])
  creatorId String

  review    TargetReview?
  deleted   Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index(realName)
  @@index(slug)
  @@index([nationalityCode])
  @@index([viewOnWarCode])
  @@index([creatorId])
}

model Evidence {
  id     String          @id @default(cuid())
  resume String          @db.VarChar(512)
  urls   EvidenceUrl[]
  images EvidenceImage[]

  targetId           String
  target             Target   @relation(fields: [targetId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  targetMainEvidence Target?  @relation("TargetMainEvidence")
  creator            Creator? @relation(fields: [creatorId], references: [id])
  creatorId          String

  review    EvidenceReview?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([targetId])
  @@index([creatorId])
}

model EvidenceReview {
  id            String  @id @default(cuid())
  reviewComment String
  accepted      Boolean @default(false)

  evidence   Evidence @relation(fields: [evidenceId], references: [id])
  evidenceId String   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EvidenceUrl {
  id         String   @id @default(cuid())
  url        String
  evidence   Evidence @relation(fields: [evidenceId], references: [id])
  evidenceId String

  @@index(url)
  @@index([evidenceId])
}

model EvidenceImage {
  id         String   @id @default(cuid())
  path       String
  evidence   Evidence @relation(fields: [evidenceId], references: [id])
  evidenceId String

  @@index([evidenceId])
}
